{"config":{"indexing":"full","jieba_dict":null,"jieba_dict_user":null,"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"<p>PyGUI is an easy-to-use GUI library for Python.</p> <p>Install it using <code>pip install py-gui-tool</code>.</p> <p>In less than 10 lines you can easily make a GUI:</p> <pre><code>import pygui\n\nwindow = pygui.Window(\"Hello World\") # (1)!\n\n@window.frame(\"Hello World\", width=700, height=450) # (2)!\ndef hello_world(elements: pygui.Elements):\n    elements.text(\"Hello World!\") # (3)!\n\nwindow.start() # (4)!\n</code></pre> <ol> <li>Initialize the window with the name <code>Hello World</code>.</li> <li>Create a frame with the name <code>Hello World</code>.</li> <li>Add the text <code>Hello World!</code> to the frame.</li> <li>Make the window visible.</li> </ol> <p></p>","title":"Home"},{"location":"call-reference/","text":"<p>On this page, you will find a list of all the functions and methods that are available in the library and details about them.</p>","title":"Call Reference"},{"location":"call-reference/#windowtitle-width-height-font","text":"<p> 1.0.2 - The window object.</p>    Parameter Latest Change Type Required Default Value Description     title  1.0.2 string   This will be the window title.   width  1.0.2 integer  800 This will be the width of the window.   height  1.0.2 integer  600 This will be the height of the window.   font  1.0.2 file path (string)  Roboto The font the window should use.   theme  1.2.0 light, dark or auto  auto The theme of the window.     Example <pre><code>import pygui\n\nwindow = pygui.Window(\"Hello World\", width=800, height=600, font=\"./Arial.ttf\")\n</code></pre>","title":"Window(title, width, height, font)"},{"location":"call-reference/#windowstart","text":"<p> 1.0.2 - Start the window. This will make the window visible and wait for the user to close it. This will return when the user closes the window.</p>  Example <p><pre><code>import pygui\n\nwindow = pygui.Window(\"Hello World\")\n\nwindow.start()\n</code></pre> </p>","title":"Window.start()"},{"location":"call-reference/#windowframetitle-width-height","text":"<p> 1.0.2 - Add a frame to the window.</p>    Parameter Latest Change Type Required Default Value Description     title  1.0.2 string   This will be the frame's title.   width  1.0.2 integer  Minimum Possible This will be the frame's width.   height  1.0.2 integer  Minimum Possible This will be the frame's height.     Example <p><pre><code>import pygui\n\nwindow = pygui.Window(\"Hello World\")\n\n@window.frame(\"Hello World\", width=700, height=450)\ndef hello_world(elements: pygui.Elements):\n    pass\n\nwindow.start()\n</code></pre> </p>   <p>Tip</p> <p>Although width and height are not required, they are recommended to be set. If they are not set, the frame will be as small as possible. Which will make it difficult to interact with the frame. A good way to find good widths and heights is to resize the frame to your liking. Then you can go into the <code>imgui.ini</code> file and see the width and height of the frame.</p>","title":"Window.frame(title, width, height)"},{"location":"call-reference/#windowmenucategory-title-keys","text":"<p> 1.0.2 - Add a menu button to the top of the window.</p>    Parameter Latest Change Type Required Default Value Description     category  1.0.2 string   The button category to put this button under. If the category does not exist it will be added to the top bar of the screen.   title  1.0.2 string   The button to be added to the category.   keys  1.0.2 string   The keys that will be used to activate the button. Look below for usable keys.    <p>Usable key names are:</p> <ul> <li><code>Ctrl</code></li> <li><code>Shift</code></li> <li><code>Alt</code></li> <li>Any key name from <code>A</code> to <code>Z</code></li> <li>Any key name from <code>0</code> to <code>9</code></li> </ul>  Example <p><pre><code>import pygui\n\nwindow = pygui.Window(\"Hello World\")\n\n@window.menu(\"File\", \"Quit\", keys=[\"Ctrl\", \"Q\"])\ndef quit_program():\n    exit(0)\n\nwindow.start()\n</code></pre> </p>","title":"Window.menu(category, title, keys)"},{"location":"call-reference/#elementsstate","text":"<p> 1.0.2 - The elements object.</p>  <p>Warning</p> <p>This should not be used directly. When passing a function into the frame decorator, the function passed will get the elements object as the first argument.</p>","title":"Elements(state)"},{"location":"call-reference/#elementstexttext-text_color-center-wrap_text","text":"<p> 1.0.2 - Add text to the frame.</p>    Parameter Latest Change Type Required Default Value Description     text  1.0.2 string   This will be the text to be added.   text_color  1.2.0 HEX (int like 0xFF0000), RGB or RGBA (tuple like (255, 0, 0, 1))  None (auto) The color of the text.   center  1.0.2 boolean  False Wether or not the text should be centered.   wrap_text  1.0.2 boolean  True Wether or not the text should be wrapped.     <p>Warning</p> <p>Center and wrap cannot be used together (yet). If both are enabled the text will not be centered.</p>   Example <p>Let's add some text to the frame.</p> <p><pre><code>import pygui\n\nwindow = pygui.Window(\"Hello World\")\n\n@window.frame(\"Hello World\", width=700, height=450)\ndef hello_world(elements: pygui.Elements):\n    elements.text(\"Hello World!\")\n\nwindow.start()\n</code></pre> </p>","title":"Elements.text(text, text_color, center, wrap_text)"},{"location":"call-reference/#elementsbuttontext-text_color-wrap_text","text":"<p> 1.0.2 - Add a button to the frame.</p>    Parameter Latest Change Type Required Default Value Description     text  1.0.2 string   This will be the text on the button.   text_color  1.2.0 HEX (int like 0xFF0000), RGB or RGBA (tuple like (255, 0, 0, 1))  None (auto) The color of the text.   wrap_text  1.0.2 boolean  True Wether or not the text should be wrapped    <p>Returns a decorator. The function passed into the decorator will get called when the button is clicked.</p>  Example <p>Let's add a button to the frame.</p> <p><pre><code>import pygui\n\nwindow = pygui.Window(\"Hello World\")\n\n@window.frame(\"Hello World\", width=700, height=450)\ndef hello_world(elements: pygui.Elements):\n    @elements.button(\"Hello World!\")\n    def hello_world_button():\n        print(\"Hello World!\")\n\nwindow.start()\n</code></pre> </p> <p>When you click the button <code>Hello World!</code> will be printed!</p>","title":"Elements.button(text, text_color, wrap_text)"},{"location":"call-reference/#elementsbutton_eventkey-time_limit","text":"<p> 1.1.0 - Add an element to the frame for <code>time_limit</code> seconds after a button is clicked.</p>    Parameter Latest Change Type Required Default Value Description     key  1.1.0 string   The button's key.   time_limit  1.1.0 seconds (integer)  10 The amount of time the elements should be rendered after the button is pressed.    <p>Returns a decorator. The function passed into the decorator will get called constantly for <code>time_limit</code> seconds.</p>  Example <p>Let's redo the button example with the <code>Hello World</code> text being rendered for 10 seconds after the button is clicked.</p> <pre><code>import pygui\n\nwindow = pygui.Window(\"Hello World\")\n\n@window.frame(\"Hello World\", width=700, height=450)\ndef hello_world(elements: pygui.Elements):\n    @elements.button(\"Hello World!\", key=\"hello\")\n    def hello_world_button():\n        pass\n\n    @elements.button_event(\"hello\", time_limit=10)\n    def hello_world_button_event():\n        elements.text(\"Hello World!\")\n\nwindow.start()\n</code></pre> <p>When you click the button <code>Hello World!</code> will be added to the frame for the next 10 seconds!</p>   <p>Warning</p> <p>Operations like opening files should never be done in the <code>button_event</code> function. This should be done in the <code>button</code> function.</p>","title":"Elements.button_event(key, time_limit)"},{"location":"call-reference/#elementscheckboxlabel-default_value-key","text":"<p> 1.0.2 - Add a checkbox to the frame.</p>    Parameter Latest Change Type Required Default Value Description     label  1.0.2 string   This text will appear after the checkbox.   default_value  1.0.2 boolean   If the checkbox should be checked by default.   key  1.0.2 string or None  None What the value will be saved under in the state.    <p>Returns whether or not the checkbox is checked.</p>  Example <p>Let's add a checkbox to the frame.</p> <p><pre><code>import pygui\n\nwindow = pygui.Window(\"Hello World\")\n\n@window.frame(\"Hello World\", width=700, height=450)\ndef hello_world(elements: pygui.Elements):\n    checked = elements.checkbox(\"Check Me\", True)\n    elements.text(f\"Current State: {checked}\")\n\nwindow.start()\n</code></pre> </p>","title":"Elements.checkbox(label, default_value, key)"},{"location":"call-reference/#elementscolor_pickerlabel-default_value-alpha-key","text":"<p> 1.0.2 - Add a color picker to the frame.</p>    Parameter Latest Change Type Required Default Value Description     label  1.0.2 string   This text will appear after the color picker.   default_value  1.0.2 HEX (int like 0xFF0000), RGB or RGBA (tuple like (255, 0, 0, 1))   The default color of the color picker.   alpha  1.0.2 boolean  False If a color is allowed to have an alpha value.   key  1.0.2 string or None  None What the value will be saved under in the state.    <p>Returns the color selected as an RGB or RGBA tuple.</p>  Example <p>Let's add a color picker to the frame.</p> <p><pre><code>import pygui\n\nwindow = pygui.Window(\"Hello World\")\n\n@window.frame(\"Hello World\", width=700, height=450)\ndef hello_world(elements: pygui.Elements):\n    color = elements.color_picker(\"Pick a color\", 0x008080)\n    elements.text(f\"You picked: {color}\", text_color=color)\n\nwindow.start()\n</code></pre> </p>","title":"Elements.color_picker(label, default_value, alpha, key)"},{"location":"call-reference/#elementsinput_intlabel-default_value-minimum-maximum-key-wrap_text","text":"<p> 1.0.2 - Add an input to the frame that only accepts integers.</p>    Parameter Latest Change Type Required Default Value Description     label  1.0.2 string   This text will appear after the input.   default_value  1.0.2 integer  0 The default value of the input.   minimum  1.0.2 integer  negative infinity The minimum value of the input.   maximum  1.0.2 integer  positive infinity The maximum value of the input.   key  1.0.2 string or None  None What the value will be saved under in the state.   wrap_text  1.0.2 boolean  True Wether or not the text should be wrapped.     Example <p>Let's add an input to the frame.</p> <p><pre><code>import pygui\n\nwindow = pygui.Window(\"Hello World\")\n\n@window.frame(\"Hello World\", width=700, height=450)\ndef hello_world(elements: pygui.Elements):\n    value = elements.input_int(\"What is your favorite number?\", 7)\n    elements.text(f\"You picked: {value}\")\n\nwindow.start()\n</code></pre> </p>","title":"Elements.input_int(label, default_value, minimum, maximum, key, wrap_text)"},{"location":"call-reference/#elementsinput_textlabel-default_value-key-wrap_text-max_length","text":"<p> 1.0.2 - Add an input to the frame.</p>    Parameter Latest Change Type Required Default Value Description     label  1.0.2 string   This text will appear after the input.   default_value  1.0.2 string  empty string The default value of the input.   key  1.0.2 string or None  None What the value will be saved under in the state.   wrap_text  1.0.2 boolean  True Wether or not the text should be wrapped.   max_length  1.0.2 integer  255 The maximum amount of characters that can be in the input.     Example <p>Let's add an input to the frame.</p> <p><pre><code>import pygui\n\nwindow = pygui.Window(\"Hello World\")\n\n@window.frame(\"Hello World\", width=700, height=450)\ndef hello_world(elements: pygui.Elements):\n    value = elements.input_text(\"Enter text\", \"Hello World!\")\n    elements.text(f\"You picked: {value}\")\n\nwindow.start()\n</code></pre> </p>","title":"Elements.input_text(label, default_value, key, wrap_text, max_length)"},{"location":"call-reference/#elementsstate_1","text":"<p> 1.0.2 - This element stores the values of some objects.</p> <ul> <li>You can use the <code>state</code> for getting the value of objects before their definition.</li> </ul> <pre><code>import pygui\n\nwindow = pygui.Window(\"Hello World\")\n\n@window.frame(\"Hello World\", width=700, height=450)\ndef hello_world(elements: pygui.Elements):\n    elements.text(f\"You picked: {elements.state.get(\"favorite\")}\")\n    value = elements.input_int(\"What is your favorite number?\", 7, key=\"favorite\")\n\nwindow.start()\n</code></pre> <ul> <li>You can use the <code>state</code> for setting an object's state.</li> </ul> <pre><code>import pygui\n\nwindow = pygui.Window(\"Hello World\")\n\n@window.frame(\"Hello World\", width=700, height=450)\ndef hello_world(elements: pygui.Elements):\n    value = elements.input_int(\"What is your favorite number?\", 7, key=\"favorite\")\n    @elements.button(\"Add 2\")\n    def add_2():\n        elements.state[\"favorite\"] = value + 2 # (1)!\n\nwindow.start()\n</code></pre> <ol> <li>As of now, the value will only be set in the state when it is changed.</li> </ol>","title":"Elements.state"}]}